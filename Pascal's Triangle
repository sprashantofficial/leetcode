Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.


In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

Logic-

class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> output = new ArrayList<List<Integer>>();
        
        if (numRows == 0) {
            return output;
        }

        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(1);
        output.add(firstRow);

        for (int i = 1; i < numRows; i++) {
            List<Integer> row = new ArrayList<>();
            row.add(1);
            
            List<Integer> prevRow = output.get(i-1);

            for (int j = 0; j < prevRow.size()-1; j++) {
                row.add(prevRow.get(j) + prevRow.get(j+1));
            }

            row.add(1);

            output.add(row);
        }

        return output;
    }
}

Runtime: 1 ms, faster than 41.46% of Java online submissions for Pascal's Triangle.
Memory Usage: 39 MB, less than 5.22% of Java online submissions for Pascal's Triangle.
