Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Logic-

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode head = null;    
    public ListNode tail = null; 
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        List<Integer> list = new ArrayList<>();
        
        ListNode root = l1;
        while (root != null) {
            list.add(root.val);
            root = root.next;
        }
        
        root = l2;
        while (root != null) {
            list.add(root.val);
            root = root.next;
        }
        
        Collections.sort(list);
        
        for (int num : list) {
            insert(num);
        }
        
        return head;
    }
    
    public void insert(int data) {
        //Create a new node    
        ListNode newNode = new ListNode(data); 
        
         if(head == null) {    
            //If list is empty, both head and tail will point to new node    
            head = newNode;    
            tail = newNode;    
        }    
        else {    
            //newNode will be added after tail such that tail's next will point to newNode    
            tail.next = newNode;    
            //newNode will become new tail of the list    
            tail = newNode;    
        } 
    }
}

Runtime: 2 ms, faster than 5.07% of Java online submissions for Merge Two Sorted Lists.
Memory Usage: 38.9 MB, less than 75.24% of Java online submissions for Merge Two Sorted Lists.
