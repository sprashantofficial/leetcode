Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode"
return 2.

Logic:1-

class Solution {
    public int firstUniqChar(String s) {
        Map<Character, Integer> map = new LinkedHashMap<>();
        
        for (char c : s.toCharArray()) {
            if (map.get(c) == null) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c)+1);
            }
        }
        
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                return s.indexOf(entry.getKey()); 
            }
        }
        
        return -1;
    }
}

Runtime: 53 ms, faster than 14.40% of Java online submissions for First Unique Character in a String.
Memory Usage: 52.1 MB, less than 5.07% of Java online submissions for First Unique Character in a String.

Logic:2-

class Solution {
    public int firstUniqChar(String s) {
        Map<Character, Integer> map = new HashMap<>();
        
        for (char c : s.toCharArray()) {
            if (map.get(c) == null) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c)+1);
            }
        }
        
        for (int i = 0; i < s.length(); i++) {
            if (map.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        
        return -1;
    }
}

Runtime: 47 ms, faster than 18.57% of Java online submissions for First Unique Character in a String.
Memory Usage: 52 MB, less than 5.07% of Java online submissions for First Unique Character in a String.
