Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

My Silly Logic-1

class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0;
        List<Integer> list = new LinkedList<>();
        for (int i : nums) {
            if (i == 0) {
                count++;
            } else {
                list.add(i);
            }
        }
        
        for (int i = 0; i < count; i++) {
            list.add(0);
        }
        
        for (int i=0; i < list.size(); i++) {
            nums[i] = list.get(i);
        }

    }
}

Runtime: 63 ms, faster than 5.24% of Java online submissions for Move Zeroes.
Memory Usage: 42.4 MB, less than 5.09% of Java online submissions for Move Zeroes.

Logic-2

class Solution {
    public void moveZeroes(int[] nums) {
        int k = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[k++] = nums[i];
            }
        }
        
        for (int i = k; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Move Zeroes.
Memory Usage: 42.4 MB, less than 5.58% of Java online submissions for Move Zeroes.
