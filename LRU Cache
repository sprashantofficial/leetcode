Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

class LRUCache {

    Map<Integer, Integer> map = new LinkedHashMap<>();
    int capacity;
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        System.out.println("Capacity is set-> " + this.capacity);
    }
    
    public int get(int key) {
        System.out.println("Getting-> " + key);
        
        if (map.get(key) == null) {
            return -1;
        }
        
        int value = 0;
        Iterator<Map.Entry<Integer,Integer>> it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<Integer,Integer> entry = it.next();
            if (entry.getKey() == key) {
                System.out.println("Removing->" + entry.getKey());
                value = entry.getValue();
                it.remove();
                break;
            }   
        }
        
        map.put(key,value);
        
        return value;   
    }
    
    public void put(int key, int value) {
        System.out.println("Adding-> " + key + "," + value);
        
        if (map.size() == capacity && map.get(key) == null) {
            System.out.println("Full");
            Iterator<Map.Entry<Integer,Integer>> it = map.entrySet().iterator();
            Map.Entry<Integer,Integer> entry = it.next();
            System.out.println("Removing->" + entry.getKey());
            it.remove();
        } else if (map.get(key) != null) {
            System.out.println("Already exists");
            Iterator<Map.Entry<Integer,Integer>> it = map.entrySet().iterator();
            
            while (it.hasNext()) {
                Map.Entry<Integer,Integer> entry = it.next();
                if (entry.getKey() == key) {
                    System.out.println("Removing->" + entry.getKey());
                    it.remove();
                    break;
                }   
            }
        }
        
        map.put(key, value);
        
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */


Runtime: 499 ms, faster than 5.05% of Java online submissions for LRU Cache.
Memory Usage: 47.5 MB, less than 84.59% of Java online submissions for LRU Cache.
