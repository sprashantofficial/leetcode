You have an array of logs.  Each log is a space delimited string of words.

For each log, the first word in each log is an alphanumeric identifier.  Then, either:

Each word after the identifier will consist only of lowercase letters, or;
Each word after the identifier will consist only of digits.
We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

Return the final order of the logs.

 

Example 1:

Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
 

Constraints:

0 <= logs.length <= 100
3 <= logs[i].length <= 100
logs[i] is guaranteed to have an identifier, and a word after the identifier.


Logic-

class Solution {
    public String[] reorderLogFiles(String[] logs) {
       Comparator<String> comp = new Comparator<String>(){
           @Override
           public int compare(String log1, String log2) {
               String[] s1 = log1.split(" ", 2);
               String[] s2 = log2.split(" ", 2);
               
               boolean isS1Digit = Character.isDigit(s1[1].charAt(0));
               boolean isS2Digit = Character.isDigit(s2[1].charAt(0));
               
               if (!isS1Digit && !isS2Digit) {
                   if (s1[1].compareTo(s2[1]) == 0) {
                       return s1[0].compareTo(s2[0]);
                   } else {
                       if (s1[1].compareTo(s2[1]) > 0) {
                           return 1;
                       }
                       return -1;
                   }
               }
               
               if (isS1Digit) {
                   if (isS2Digit) {
                       return 0;
                   } else {
                       return 1;
                   }
               }
               
               return -1;
           }
       };
        
        Arrays.sort(logs, comp);
        
        return logs;
    }
}

Runtime: 11 ms, faster than 29.92% of Java online submissions for Reorder Data in Log Files.
Memory Usage: 47 MB, less than 8.26% of Java online submissions for Reorder Data in Log Files.
