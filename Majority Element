Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

My Logic -

class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i : nums) {
            if (map.containsKey(i)) {
                map.put(i, map.get(i)+1);
            } else {
                map.put(i, 1);
            }
        }
        
        int max = 0;
        int val = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() > max) {
                max = entry.getValue();
                val = entry.getKey();
            }
        }
        
        return val;
    }
}

Runtime: 27 ms, faster than 6.73% of Java online submissions for Majority Element.
Memory Usage: 54 MB, less than 7.65% of Java online submissions for Majority Element.

# As you can see this is not as efficient as I supposed, but let me think of another ways

Logic-2

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

Runtime: 3 ms, faster than 60.18% of Java online submissions for Majority Element.
Memory Usage: 51 MB, less than 11.03% of Java online submissions for Majority Element.
