There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:



Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
 

Constraints:

1 <= n <= 10^5
n-1 <= connections.length <= 10^5
connections[i][0] != connections[i][1]
There are no repeated connections.

Logic-

class Solution {
    
    List<Integer>[] graph;
    List<List<Integer>> result = new ArrayList<>();
    int depth = 0;
    int[] label, low;
    boolean[] visited;
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        graph = new ArrayList[n];
        label = new int[n];
        low = new int[n];
        visited = new boolean[n];
        
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        
        for (List<Integer> conn : connections) {
            int a = conn.get(0);
            int b = conn.get(1);
            
            graph[a].add(b);
            graph[b].add(a);
        }
        
        dfs(connections, 0, -1);
        
        return result;
    }
    
    void dfs(List<List<Integer>> connections, int node, int parent) {
        visited[node] = true;
        label[node] = depth;
        low[node] = depth++;
        
        for (int nb : graph[node]) {
            if (nb == parent) {
                continue;
            }
            
            if (!visited[nb]) {
                dfs(connections, nb, node);
                
                low[node] = Math.min(low[node], low[nb]);
                
                if (label[node] < low[nb]) {
                    result.add(Arrays.asList(node, nb));
                }
            } else {
                low[node] = Math.min(low[node], low[nb]);
            }
        }
    }
}

Runtime: 90 ms, faster than 89.21% of Java online submissions for Critical Connections in a Network.
Memory Usage: 103.7 MB, less than 75.94% of Java online submissions for Critical Connections in a Network.
