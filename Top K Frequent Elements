Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

Logic-1:

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int n : nums) {
            if (!map.containsKey(n)) {
                map.put(n, 1);
            } else {
                map.put(n, map.get(n) + 1);
            }
        }
        
        LinkedHashMap<Integer, Integer> sortedMap = map.entrySet()
            .stream()
            .sorted(Map.Entry.<Integer,Integer> comparingByValue().reversed())
            .limit(k)
            .collect(Collectors.toMap(Map.Entry::getKey,
                                     Map.Entry::getValue, (e1,e2) -> e1, LinkedHashMap::new));
        
        int[] arr = new int[k];
        int i = 0;
        for (Map.Entry<Integer, Integer> entry : sortedMap.entrySet()) {
            arr[i] = entry.getKey();
            i++;
        }
        
        return arr;
    }
}

Runtime: 15 ms, faster than 48.20% of Java online submissions for Top K Frequent Elements.
Memory Usage: 42.3 MB, less than 61.47% of Java online submissions for Top K Frequent Elements.
