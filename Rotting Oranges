In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.


Logic-1:

class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        
        int fresh = 0;
        for (int i=0; i < grid.length; i++) {
            for (int j=0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                    q.add(new int[]{i, j});
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        
        if (fresh == 0) {
            return 0;
        }
        
        int count = 0;
        while (!q.isEmpty()) {
            System.out.println("Fresh at the start-> " + fresh);
            
            int size = q.size();
            if (fresh == 0) {
                break;
            }
            
            for (int i=0; i < size; i++) {
                int x = q.peek()[0];
                int y = q.peek()[1];
                System.out.println(x + " " + y);
                q.remove();
                System.out.println("Removed");
                
                if (x > 0 && grid[x-1][y] == 1) {
                    grid[x-1][y] = 2;
                    q.add(new int[]{x-1, y});
                    System.out.println("Added-> " + (x-1) + " " + y);
                    fresh--;
                    System.out.println("Fresh-> " + fresh);
                }
                if (y < grid[0].length-1 && grid[x][y+1] == 1) {
                    grid[x][y+1] = 2;
                    q.add(new int[]{x, y+1});
                    System.out.println("Added-> " + x + " " + (y+1));
                    fresh--;
                    System.out.println("Fresh-> " + fresh);
                }
                if (x < grid.length-1 && grid[x+1][y] == 1) {
                    grid[x+1][y] = 2;
                    q.add(new int[]{x+1, y});
                    System.out.println("Added-> " + (x+1) + " " + y);
                    fresh--;
                    System.out.println("Fresh-> " + fresh);
                }
                if (y > 0 && grid[x][y-1] == 1) {
                    grid[x][y-1] = 2;
                    q.add(new int[]{x, y-1});
                    System.out.println("Added-> " + x + " " + (y-1));
                    fresh--;
                    System.out.println("Fresh-> " + fresh);
                }
            }
            
            if (!q.isEmpty()) {
                count++;
                System.out.println("Count-> " + count);
            }
            
            System.out.println("For loop ended");
        }
        
        return fresh==0 ? count : -1;
    }
}

Runtime: 44 ms, faster than 5.43% of Java online submissions for Rotting Oranges.
Memory Usage: 40.3 MB, less than 12.06% of Java online submissions for Rotting Oranges.
