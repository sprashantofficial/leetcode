Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Logic-1:

class Solution {
    public int maxProfit(int[] p) {
        int max = 0;
        
        for (int i = 0; i < p.length; i++) {
            for (int j = i+1; j < p.length; j++) {
                if (p[j] > p[i]) {
                    int diff = p[j] - p[i];
                    if (diff > max) {
                        max = diff;
                    }
                }
            }
        }
        
        return max;
    }
}

Runtime: 319 ms, faster than 5.42% of Java online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 41.4 MB, less than 29.47% of Java online submissions for Best Time to Buy and Sell Stock.

Logic-2:

class Solution {
    public int maxProfit(int[] p) {
        int max = 0;
        int min = Integer.MAX_VALUE;
        
        for (int i = 0; i < p.length; i++) {
            if (min > p[i]) {
                min = p[i];
            } else if (p[i]-min > max) {
                max = p[i]-min;
            }
        }
        
        return max;
    }
}

Runtime: 1 ms, faster than 99.40% of Java online submissions for Best Time to Buy and Sell Stock.
Memory Usage: 39.6 MB, less than 50.08% of Java online submissions for Best Time to Buy and Sell Stock.
