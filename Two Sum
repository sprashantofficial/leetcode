Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Logic-1:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        
        for (int i = 0; i < nums.length; i++) {
            for (int j = i+1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    result[0] = i;
                    result[1] = j;
                    break;
                }
            }
        }
        
        return result;
    }
}

Runtime: 63 ms, faster than 26.10% of Java online submissions for Two Sum.
Memory Usage: 39.4 MB, less than 89.49% of Java online submissions for Two Sum.

Logic-2:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int minus = target - nums[i];
            
            if (map.containsKey(minus)) {
                return new int[] {map.get(minus), i};
            }
            
            map.put(nums[i], i);
        }
        
        throw new RuntimeException("No elements found");
    }
}

Runtime: 1 ms, faster than 99.98% of Java online submissions for Two Sum.
Memory Usage: 39.5 MB, less than 82.91% of Java online submissions for Two Sum.
